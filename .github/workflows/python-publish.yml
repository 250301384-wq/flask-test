name: CI/CD 部署流水线

on:
  push:
    branches: [main, staging, dev]
  pull_request:
    branches: [main, staging, dev]

env:
  PYTHON_VERSION: '3.10'
  FLASK_APP: app/main.py

jobs:
  test:
    name: 测试和代码质量检查
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4
      
      - name: 设置 Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 安装依赖包
        run: |
          python -m pip install --upgrade pip
          # 安装所有必要的工具
          pip install black ruff flake8 pytest
          # 安装项目依赖
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Black 代码格式化检查
        run: |
          black --check app/ tests/
      
      - name: Ruff 代码质量检查
        run: |
          ruff check app/ tests/
      
      - name: Flake8 代码风格检查
        run: |
          flake8 app/ tests/ --max-line-length=127 --extend-ignore=E203,W503
      
      - name: 运行测试套件
        run: |
          python -m pytest tests/ -v
      
      - name: 验证应用导入
        run: |
          python -c "from app.main import app; print('✅ 应用导入成功')"
          python -c "from app.config import get_settings; print('✅ 配置导入成功')"

  build:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 构建 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            news-classifier:latest
            news-classifier:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
      
      - name: 验证镜像运行
        run: |
          echo "启动容器进行健康检查..."
          docker run -d -p 5000:5000 --name health-check news-classifier:latest
          sleep 10
          
          echo "检查容器状态..."
          docker ps | grep health-check
          
          echo "测试健康检查接口..."
          curl -f http://localhost:5000/health || exit 1
          
          echo "测试首页接口..."
          curl -f http://localhost:5000/ || exit 1
          
          echo "✅ Docker 镜像验证成功"
          docker stop health-check
          docker rm health-check
