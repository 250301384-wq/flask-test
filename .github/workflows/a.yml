# Flask 应用 CI/CD 工作流
# 文件位置: .github/workflows/deploy.yml

name: Flask CI/CD Pipeline

# 触发条件
on:
  # 当代码推送到 main 分支时触发
  push:
    branches: [ main, master ]
  # 当创建 Pull Request 到 main 分支时触发
  pull_request:
    branches: [ main, master ]
  # 允许手动触发工作流
  workflow_dispatch:

# 环境变量配置
env:
  PYTHON_VERSION: '3.11'  # Python 版本
  FLASK_APP: app.py       # Flask 应用入口文件
  
# 定义多个任务
jobs:
  
  # ============================================
  # 任务 1: 代码测试和质量检查
  # ============================================
  test:
    name: 测试和代码质量检查
    runs-on: ubuntu-latest  # 运行环境
    
    steps:
      # 步骤 1: 检出代码
      - name: 检出代码仓库
        uses: actions/checkout@v4
      
      # 步骤 2: 设置 Python 环境
      - name: 设置 Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # 缓存 pip 依赖以加速构建
          cache: 'pip'
      
      # 步骤 3: 安装依赖
      - name: 安装依赖包
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          # 如果有 requirements.txt 则安装
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      # 步骤 4: 代码风格检查
      - name: Flake8 代码风格检查
        run: |
          # 停止构建如果有 Python 语法错误或未定义的变量
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # 退出时将所有错误视为警告，GitHub 编辑器宽度为 127 个字符
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true  # 即使失败也继续执行
      
      # 步骤 5: 运行单元测试
      - name: 运行 Pytest 单元测试
        run: |
          # 运行测试并生成覆盖率报告
          pytest tests/ --cov=. --cov-report=xml --cov-report=html
        continue-on-error: false  # 测试失败则停止工作流
      
      # 步骤 6: 上传测试覆盖率报告
      - name: 上传覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7  # 保留 7 天
  
  # ============================================
  # 任务 2: 构建 Docker 镜像
  # ============================================
  build:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    needs: test  # 依赖测试任务完成
    # 只有在推送到 main 分支时才构建
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      # 步骤 1: 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 步骤 2: 设置 Docker Buildx (支持多平台构建)
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 步骤 3: 登录到 Docker Hub
      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 用户名 (在 GitHub Secrets 中配置)
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 密码或访问令牌
      
      # 步骤 4: 提取元数据 (标签、注释)
      - name: 提取 Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/flask-app  # 镜像名称
          tags: |
            # 设置多个标签
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      # 步骤 5: 构建并推送 Docker 镜像
      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .                    # 构建上下文目录
          file: ./Dockerfile            # Dockerfile 路径
          push: true                    # 推送镜像到仓库
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha          # 使用 GitHub Actions 缓存
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64  # 多平台构建
  
  # ============================================
  # 任务 3: 部署到服务器
  # ============================================
  deploy:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: build  # 依赖构建任务完成
    environment:
      name: production  # 部署环境名称
      url: https://your-app.com  # 应用访问地址
    
    steps:
      # 步骤 1: 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 步骤 2: 通过 SSH 部署到服务器
      - name: 部署到服务器
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}      # 服务器 IP 地址
          username: ${{ secrets.SERVER_USER }}  # SSH 用户名
          key: ${{ secrets.SERVER_SSH_KEY }}    # SSH 私钥
          port: ${{ secrets.SERVER_PORT }}      # SSH 端口 (默认 22)
          script: |
            # 进入应用目录
            cd /home/app/flask-app
            
            # 拉取最新代码
            git pull origin main
            
            # 拉取最新 Docker 镜像
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
            
            # 停止旧容器
            docker-compose down
            
            # 启动新容器
            docker-compose up -d
            
            # 清理未使用的镜像
            docker image prune -f
            
            # 查看容器状态
            docker-compose ps
      
      # 步骤 3: 健康检查
      - name: 应用健康检查
        run: |
          # 等待应用启动
          sleep 10
          
          # 检查应用是否正常响应
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-app.com/health)
          
          if [ $response -eq 200 ]; then
            echo "✅ 应用部署成功，健康检查通过"
          else
            echo "❌ 应用健康检查失败，HTTP 状态码: $response"
            exit 1
          fi
      
      # 步骤 4: 发送通知
      - name: 发送部署通知
        if: always()  # 无论成功失败都执行
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Flask 应用部署 ${{ job.status }}
            提交: ${{ github.sha }}
            作者: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}  # Slack Webhook URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # 任务 4: 回滚 (可选)
  # ============================================
  rollback:
    name: 回滚到上一版本
    runs-on: ubuntu-latest
    needs: deploy
    # 只有当部署失败时才触发
    if: failure()
    
    steps:
      - name: 回滚部署
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /home/app/flask-app
            # 回退到上一个提交
            git reset --hard HEAD^
            # 使用之前的镜像重启
            docker-compose down
            docker-compose up -d
            echo "⚠️ 已回滚到上一版本"