# Flask 应用 CI/CD 工作流（精简版）
# 文件位置: .github/workflows/deploy.yml

name: Flask CI/CD Pipeline

# 触发条件
on:
  # 当代码推送到 main 分支时触发
  push:
    branches: [ main, master ]
  # 当创建 Pull Request 到 main 分支时触发
  pull_request:
    branches: [ main, master ]
  # 允许手动触发工作流
  workflow_dispatch:

# 环境变量配置
env:
  PYTHON_VERSION: '3.11'  # Python 版本
  FLASK_APP: app.py       # Flask 应用入口文件
  
# 定义多个任务
jobs:
  
  # ============================================
  # 任务 1: 代码测试和质量检查
  # ============================================
  test:
    name: 测试和代码质量检查
    runs-on: ubuntu-latest
    
    steps:
      # 步骤 1: 检出代码
      - name: 检出代码仓库
        uses: actions/checkout@v4
      
      # 步骤 2: 设置 Python 环境
      - name: 设置 Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      # 步骤 3: 安装依赖
      - name: 安装依赖包
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      # 步骤 4: 代码风格检查
      - name: Flake8 代码风格检查
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      # 步骤 5: 运行单元测试
      - name: 运行 Pytest 单元测试
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=html
        continue-on-error: false
      
      # 步骤 6: 上传测试覆盖率报告
      - name: 上传覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7
  
  # ============================================
  # 任务 2: 构建 Docker 镜像（仅本地构建）
  # ============================================
  build:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    needs: test  # 依赖测试任务完成
    
    steps:
      # 步骤 1: 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 步骤 2: 设置 Docker Buildx
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 步骤 3: 构建 Docker 镜像（不推送）
      - name: 构建 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false  # 不推送镜像
          tags: flask-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true  # 加载镜像到本地 Docker
      
      # 步骤 4: 验证镜像构建成功
      - name: 验证镜像
        run: |
          echo "✅ Docker 镜像构建成功"
          docker images | grep flask-app
          
      # 步骤 5: 可选 - 运行容器测试
      - name: 测试容器运行
        run: |
          # 启动容器
          docker run -d --name test-container -p 5000:5000 flask-app:latest
          
          # 等待容器启动
          sleep 5
          
          # 检查容器状态
          docker ps -a
          
          # 简单的健康检查（如果应用有健康检查端点）
          # curl -f http://localhost:5000/health || exit 1
          
          # 停止并删除测试容器
          docker stop test-container
          docker rm test-container
          
          echo "✅ 容器测试通过"